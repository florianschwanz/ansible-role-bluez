---
- name: Uninstall packages
  package: name={{ item }} state=absent
  with_items: "{{ uninstall_packages }}"

- name: Download bluez
  get_url:
    url: "{{ bluez_artifact_download_url }}"
    dest: "/tmp/{{ bluez_artifact_name }}"
    mode: 0755

- name: Unarchive bluez
  unarchive: src="/tmp/{{ bluez_artifact_name }}" dest="/tmp/"

- name: Install packages
  package: name={{ item }} state=present
  with_items: "{{ packages }}"

- name: Call configure
  shell: "./configure --prefix=/usr"
  args:
    chdir: "/tmp/{{ bluez_artifact_dir }}"

- name: Copy patch files
  copy: src=files/{{ item }} dest=/tmp/{{ item }}
  with_items: "{{ patch_files }}"

- name: Apply patches
  shell: "patch -b -p1 -d /tmp/{{ bluez_artifact_dir }}/ < /tmp/{{ item }}"
  with_items: "{{ patch_files }}"

- name: Call make
  shell: "make -j4"
  args:
    chdir: "/tmp/{{ bluez_artifact_dir }}"

- name: Call make install
  shell: "make install"
  args:
    chdir: "/tmp/{{ bluez_artifact_dir }}"

- name: Copy firmware file
  copy: src=files/{{ item }} dest=/lib/firmware/{{ item }}
  with_items: "{{ firmware_files }}"

- name: Check if hciuart service exists
  stat: path=/lib/systemd/system/hciuart.service
  register: hciuart_stat

- name: Fix hciuart service
  lineinfile: dest=/lib/systemd/system/hciuart.service regexp="^ExecStart" line="ExecStart=/usr/bin/hciattach /dev/ttyAMA0 bcm43xx 921600 noflow -"
  when: hciuart_stat.stat.exists

- name: Create hciuart service
  copy: src=files/hciuart.service dest=/lib/systemd/system/hciuart.service
  when: not hciuart_stat.stat.exists

- name: Restart machine
  command: reboot
  async: 0
  poll: 0
  ignore_errors: true
  when: inventory_hostname != "localhost"

- name: Waiting for server to come back
  local_action: wait_for host={{ inventory_hostname }} state=started
  when: inventory_hostname != "localhost"

- debug: msg="Please reboot machine"
  when: inventory_hostname == "localhost"
